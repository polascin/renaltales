#!/bin/bash

# Pre-commit hook to check PSR compliance
# This script will run before each commit to ensure code quality

echo "Running pre-commit checks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Flag to track if any checks failed
CHECKS_FAILED=0

# Function to print colored output
print_status() {
    if [ $1 -eq 0 ]; then
        echo -e "${GREEN}✓${NC} $2"
    else
        echo -e "${RED}✗${NC} $2"
        CHECKS_FAILED=1
    fi
}

# Function to print warning
print_warning() {
    echo -e "${YELLOW}⚠${NC} $1"
}

# Check if composer is available
if ! command -v composer &> /dev/null; then
    echo -e "${RED}Error: Composer is not installed or not in PATH${NC}"
    exit 1
fi

# Check if vendor directory exists
if [ ! -d "vendor" ]; then
    echo -e "${YELLOW}Installing dependencies...${NC}"
    composer install --no-dev --optimize-autoloader
fi

# Get list of staged PHP files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.php$')

if [ -z "$STAGED_FILES" ]; then
    echo -e "${GREEN}No PHP files to check${NC}"
    exit 0
fi

echo "Checking staged PHP files..."
echo "$STAGED_FILES" | while read file; do
    echo "  - $file"
done

# 1. Check PHP syntax
echo ""
echo "1. Checking PHP syntax..."
SYNTAX_ERRORS=0
for file in $STAGED_FILES; do
    php -l "$file" > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        echo -e "${RED}Syntax error in: $file${NC}"
        SYNTAX_ERRORS=1
    fi
done

if [ $SYNTAX_ERRORS -eq 0 ]; then
    print_status 0 "PHP syntax check passed"
else
    print_status 1 "PHP syntax check failed"
fi

# 2. Check PSR-12 compliance with PHP_CodeSniffer
echo ""
echo "2. Checking PSR-12 compliance..."
composer phpcs --no-interaction 2>/dev/null
PHPCS_STATUS=$?

if [ $PHPCS_STATUS -eq 0 ]; then
    print_status 0 "PSR-12 compliance check passed"
else
    print_status 1 "PSR-12 compliance check failed"
    echo ""
    echo -e "${YELLOW}To fix coding standard violations automatically, run:${NC}"
    echo -e "${YELLOW}  composer phpcbf${NC}"
fi

# 3. Run PHPStan static analysis
echo ""
echo "3. Running static analysis..."
composer phpstan --no-interaction 2>/dev/null
PHPSTAN_STATUS=$?

if [ $PHPSTAN_STATUS -eq 0 ]; then
    print_status 0 "Static analysis passed"
else
    print_status 1 "Static analysis failed"
fi

# 4. Check for common issues
echo ""
echo "4. Checking for common issues..."

# Check for var_dump, print_r, die, exit
FORBIDDEN_FUNCTIONS=0
for file in $STAGED_FILES; do
    if grep -q -E "(var_dump|print_r|die\(|exit\()" "$file"; then
        echo -e "${RED}Forbidden function found in: $file${NC}"
        FORBIDDEN_FUNCTIONS=1
    fi
done

if [ $FORBIDDEN_FUNCTIONS -eq 0 ]; then
    print_status 0 "No forbidden functions found"
else
    print_status 1 "Forbidden functions found (var_dump, print_r, die, exit)"
fi

# Check for TODO/FIXME comments
TODO_COMMENTS=0
for file in $STAGED_FILES; do
    if grep -q -E "(TODO|FIXME|XXX)" "$file"; then
        echo -e "${YELLOW}TODO/FIXME comment found in: $file${NC}"
        TODO_COMMENTS=1
    fi
done

if [ $TODO_COMMENTS -eq 1 ]; then
    print_warning "TODO/FIXME comments found - consider addressing before commit"
fi

# 5. Check file permissions
echo ""
echo "5. Checking file permissions..."
WRONG_PERMISSIONS=0
for file in $STAGED_FILES; do
    if [ -x "$file" ]; then
        echo -e "${YELLOW}Executable permission on PHP file: $file${NC}"
        WRONG_PERMISSIONS=1
    fi
done

if [ $WRONG_PERMISSIONS -eq 0 ]; then
    print_status 0 "File permissions check passed"
else
    print_status 1 "Wrong file permissions found"
fi

# 6. Check for merge conflict markers
echo ""
echo "6. Checking for merge conflict markers..."
MERGE_CONFLICTS=0
for file in $STAGED_FILES; do
    if grep -q -E "(<<<<<<< |=======$|>>>>>>> )" "$file"; then
        echo -e "${RED}Merge conflict markers found in: $file${NC}"
        MERGE_CONFLICTS=1
    fi
done

if [ $MERGE_CONFLICTS -eq 0 ]; then
    print_status 0 "No merge conflict markers found"
else
    print_status 1 "Merge conflict markers found"
fi

# Summary
echo ""
echo "=========================================="
if [ $CHECKS_FAILED -eq 0 ]; then
    echo -e "${GREEN}All checks passed! ✓${NC}"
    echo "Commit can proceed."
    exit 0
else
    echo -e "${RED}Some checks failed! ✗${NC}"
    echo ""
    echo "Please fix the issues above before committing."
    echo ""
    echo "Common fixes:"
    echo "  - Fix syntax errors: Check PHP syntax manually"
    echo "  - Fix PSR-12 violations: composer phpcbf"
    echo "  - Fix static analysis: composer phpstan"
    echo "  - Remove debug functions: Remove var_dump, print_r, etc."
    echo "  - Fix file permissions: chmod 644 <file>"
    echo "  - Resolve merge conflicts: Edit files manually"
    echo ""
    echo "To skip these checks (not recommended), use:"
    echo "  git commit --no-verify"
    exit 1
fi
