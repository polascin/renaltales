parameters:
    level: 8
    paths:
        - src
    excludePaths:
        - vendor
    phpVersion: 80400
    reportUnmatchedIgnoredErrors: false
    tmpDir: .phpstan
    
    # Bootstrap file to load constants and autoloader
    bootstrapFiles:
        - phpstan-bootstrap.php
        
    # Enhanced type checking
    checkTooWideReturnTypesInProtectedAndPublicMethods: true
    checkUninitializedProperties: true
    checkDynamicProperties: true
    polluteScopeWithLoopInitialAssignments: false
    polluteScopeWithAlwaysIterableForeach: false
    checkAlwaysTrueCheckTypeFunctionCall: true
    checkAlwaysTrueInstanceof: true
    checkAlwaysTrueStrictComparison: true
    checkExplicitMixedMissingReturn: true
    checkFunctionNameCase: true
    checkInternalClassCaseSensitivity: true
    checkMissingCallableSignature: true
    checkMissingVarTagTypehint: true
    treatPhpDocTypesAsCertain: false
    
    # Error ignoring configuration
    ignoreErrors:
        # Ignore deprecated configuration warnings
        -
            identifier: missingType.iterableValue
        -
            identifier: missingType.generics
        
        # Ignore specific errors that are expected
        - '#^Function [a-zA-Z0-9\\_]+\(\) should return .* but returns .*#'
        
        # Ignore unsafe usage of new static() in exception classes
        - '#^Unsafe usage of new static\(\)\.#'
        
        # Ignore duplicate array keys in language files (known issue)
        -
            message: '#^Array has .* duplicate keys#'
            path: src/Models/LanguageModel.php
        
        # Ignore extending final classes (temporary)
        - '#^Class .* extends @final class#'
        
        # Ignore React Promise template type resolution issues
        - '#^Unable to resolve the template type T in call to function React\\Promise\\resolve#'
        
        # Ignore method_exists calls that always evaluate to true
        - '#^Call to function method_exists\(\) with .* will always evaluate to true#'
        
        # Ignore never read/written properties for now
        - '#^Property .* is never read, only written#'
        
        # Ignore unused methods for now
        - '#^Method .* is unused#'
        
        # Ignore non-nullable expressions on left side of ??
        - '#^Expression on left side of \?\? is not nullable#'
        
        # Ignore return type issues that can be safely ignored
        - '#^Method .* never returns .* so it can be removed from the return type#'
        
        # Ignore specific type issues in interfaces
        - '#^Cannot instantiate interface Doctrine\\.*#'
        
        # Ignore callable signature issues
        - '#^Callable .* invoked with .* parameters, .* required#'
        
        # Ignore specific parameter type issues
        - '~^Parameter #[0-9]+ \$.*? of function .* expects .*, .* given~'
        
        # Ignore strict comparison issues
        - '#^Strict comparison using .* between .* will always evaluate to .*#'
        
        # Ignore unreachable statements
        - '#^Unreachable statement - code above always terminates#'
        
        # Ignore property type specification issues
        - '#^Property .* has no type specified#'
        
        # Ignore offset access issues
        - '#^Cannot access offset .* on .*#'
        
        # Ignore comparison operation errors
        - '#^Comparison operation .* between .* results in an error#'
        
        # Ignore foreach argument type issues
        - '#^Argument of an invalid type .* supplied for foreach, only iterables are supported#'
        
        # Ignore call to undefined method issues for reflection
        - '#^Call to an undefined method Reflection.*#'
        
        # Ignore PHPDoc type issues
        - '#^PHPDoc tag @var for property .* with type .* is not subtype of native type#'
        
        # Ignore unknown class issues
        - '#^Property .* has unknown class .* as its type#'
        
        # Ignore undefined interface issues using path exclusion
        -
            message: '#^Anonymous class implements unknown interface Doctrine\\DBAL\\Logging\\SQLLogger#'
            path: src/Core/DatabaseManager.php
        
        # Ignore specific issues with constants already defined
        - '#^Constant .* already defined#'
        
        # Ignore method parameter without type specification
        - '#^Method .* has parameter .* with no type specified#'
        
        # Ignore method return type issues
        - '#^Method .* should return .* but returns .*#'
        
        # Ignore property type acceptance issues
        - '#^Property .* \(.*\) does not accept .*#'
        
        # Ignore specific function invocation issues
        - '#^Function .* invoked with .* parameters, .* required#'
        
        # Ignore offset existence issues
        - '#^Offset .* does not exist on .*#'
        
        # Ignore method call issues on mixed types
        - '#^Cannot call method .* on .*#'
